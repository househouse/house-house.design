// =============================================================================
// Styles
// =============================================================================
//
// Welcome to this custom-version of housecss!
// https://github.com/househouse/housecss
//
// Idea #1: Write SCSS (and CSS) as if someone is using it to learn how code.
//    It needs to be sensible and learnable for new front-end developers and
//    designers — everyone should be able to get going with housecss speedily.
//    We achieve this by writing well-documented code.
//
// Idea #2: housecss is content-agnostic, meaning HTML and CSS are completely
//    separate from one another. If you hide all styles from your template,
//    the HTML should be well-structured and semantically correct, formatted
//    and arranged in a logical hierarchy. That also means classes should be
//    self-documenting and independent of elements. An exception is components,
//    which are directly coupled to markup or other styles.
//
// Idea #3: Follow the Code of Conduct at all times.
//
// =============================================================================

// [1] Settings
// ---
// Code that does not output CSS styles directly. This includes CSS custom
// properties, custom media queries, etc. Things like brand colours, modular
// spacing increments, and breakpoints are defined as variables here.

@import '1-settings/variables';
@import '1-settings/responsive';
@import '1-settings/type-families';


// [2] Base
// ---
// Styles that target bare HTML elements. This mostly consists of a mixture of
// normalize.css and reset.css, and core typographic styles for things like
// headings, body text, and links which will rarely, if ever, change. No classes
// are defined here.

@import '2-base/general';
@import '2-base/typography';


// [3] Components
// ---
//
// Content-specific classes that generate distinct UI appearances. Component
// styles should also (generally) be coupled to specific markup; if it is not
// directly related to any HTML, JS, or JSX, it should be considered a utility
// class (or series of classes.) Components use the c- namespace, e.g. c-logo.

@import '3-components/bgShapes';
@import '3-components/buttonBlock';
@import '3-components/buttonLink';
@import '3-components/card';
@import '3-components/contain';
@import '3-components/fauxLink';
@import '3-components/globalHeader';
@import '3-components/globalNav';
@import '3-components/heading';
@import '3-components/modal';
@import '3-components/pillGroup';
@import '3-components/project';
@import '3-components/resident';
@import '3-components/textContent';

// @import '3-components/icon';



// [4] Utilities
// ---
//
// The bread and butter of our CSS. These are single-purpose, highly-reusable
// classes that do one thing extremely well. We have utilities for things like
// margins, padding, text alignment, display properties, positioning properties,
// and more. Utility classes use a u- namespace, e.g. u-bg-black.

@import '4-utilities/appearance';
@import '4-utilities/background';
@import '4-utilities/baseline';
@import '4-utilities/border';
@import '4-utilities/color';
@import '4-utilities/display';
@import '4-utilities/flex';
@import '4-utilities/layout';
@import '4-utilities/spacing';
@import '4-utilities/text';


// [5] Animations
// ---
//
// Grouping CSS keyframes and animations together will help organize
// interactions. Animations classes use a a- namespace, e.g. a-fade-in-top-slow.

@import '5-animations/fade';
@import '5-animations/scale-out';


// [6] Templates
// ---
//
// ⚠️ USE WITH EXTREME CAUTION: Sometimes, there are times that we need to write
// template overrides, or classes that are linked directly to the page on which
// they appear. These styles should be used as a last resort only!
//
// @import 'templates/home';
//
//
// [7] Third-Party Plugins
// ---
//
// Third-party integrations and plugins often do not let us control their
// settings, or require us to override how they work. Toss those styles into
// individual partials below.
//
// @import 'third-party/flickity';
